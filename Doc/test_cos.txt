
Install HTQ from centos:

TOC
0. OS
1. Net-Tools
2. MySQL
2.1 Init
2.2 Replication
3. Nginx/PHP
4. GlusterdFS/NFS
5. CertBot
6. supervisord
7. go-mysql-es
8. elasticsearch
9. redis
10. install phpmyadmin
11. Backup
12. Wordpress Domain Change
13. lsyncd
14. chrome
15. python3
16. PHP Session
16.1 php-redis build
17. Wordpress File Sync
18. build php by source code
18.1 build php with AMQP
19. Reindex all posts
20. StachPath cdn
21. wpcli
22. kafka
23. composer/tumblr
24. netcore
25. eclipse for php
26. opcache gui
27. web-based SSH
28. http://web-console.org/
29. wordpress multi-sites
30. nodejs
31. nltk_data

#####################################################################################
root/9IN.com

0. OS ###############################################################################

# uname -a
>> Linux shotstcosv15 3.10.0-514.el7.x86_64 #1 SMP Tue Nov 22 16:42:41 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
# cat /etc/centos-release
# vi /etc/selinux/config
SELINUX=disabled -- otherwise 404 error for php-fpm
# reboot  -- take it into effect

# groupadd --gid 1001 nginx   ---------- same gid as master
# useradd -g nginx --uid 1001 nginx ------------ same uid as master
# groups nginx  -- check if user nginx is member of group nginx
or modify group id and user id for nginx/nginx
# systemctl stop nginx	--------- if exists
# systemctl stop php-fpm -------- if exists
# groupmod -g 1001 nginx
# usermod -u 1001 nginx

####### using yum with proxy #######
in host with internet access
# sudo yum install squid
# sudo vi /etc/squid/squid.conf
change port to 33128

in host for yum without internet access
# sudo vi /etc/yum.conf
[main]
………………
proxy=http://<Proxy-Server-IP-Address>:<Proxy_Port>
proxy_username=<Proxy-User-Name>
proxy_password=<Proxy-Password> 
………………

1. Install net-tools

# sudo yum install net-tools
# sudo yum install nmap netstat
# sudo yum install lsof
# sudo yum install wget
# sudo yum install rsync
# systemctl disable firewalld
# systemctl stop firewalld
# systemctl status firewalld

or working with firewalld
# firewall-cmd --permanent --add-port=100/tcp
# firewall-cmd --permanent --add-port=9350/tcp
# firewall-cmd --permanent --add-port=9351/tcp
# firewall-cmd --reload
# firewall-cmd --list-services

2. Install mysql ###############################################################################

# sudo wget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm
# sudo md5sum mysql57-community-release-el7-9.noarch.rpm
# sudo rpm -ivh mysql57-community-release-el7-9.noarch.rpm
# sudo yum install mysql-server mysql-client
# sudo systemctl start mysqld
# sudo systemctl status mysqld
# sudo grep 'temporary password' /var/log/mysqld.log
# sudo mysql_secure_installation
root / msnP@ssw0rd01!

if access deny:
add following into /etc/my.cnf to skip password
skip-grant-tables=1

refer: https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-centos-7

2.1 Create WP database
mysql> create database wp_htq;
mysql> CREATE USER 'wp_admin'@'172.%' IDENTIFIED BY 'wpAdmin@2018';
mysql> GRANT ALL PRIVILEGES ON wp_htq.* TO 'wp_admin'@'172.%' IDENTIFIED BY 'wpAdmin@2018' WITH GRANT OPTION;
mysql> FLUSH PRIVILEGES;

mysql> CREATE USER 'atm'@'172.%' IDENTIFIED BY 'atm';
mysql> GRANT ALL PRIVILEGES ON atm.* TO 'atm'@'172.%' IDENTIFIED BY 'atm' WITH GRANT OPTION;
mysql> FLUSH PRIVILEGES;

2.2 Replication

refer to: How To Set Up Master Slave Replication in MySQL.txt.
refer to: https://dev.mysql.com/doc/refman/5.5/en/replication-howto.html

2.2.1 Master Steps

Setting the Replication Master Configuration
# vi /etc/my.cnf
[mysqld]
log-bin=mysql-bin
server-id=1

Creating a User for Replication
mysql> CREATE USER 'repl'@'%' IDENTIFIED BY 'password';
mysql> GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';

Obtaining the Replication Master Binary Log Coordinates
mysql> FLUSH TABLES WITH READ LOCK;
mysql > SHOW MASTER STATUS;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000001 | 747      |              |                  |
+------------------+----------+--------------+------------------+

Creating a Data Snapshot Using mysqldump
# mysqldump -u root -p --all-databases --master-data > dbdump.db
copy dbdump.db to SLAVE

Released the read lock:
mysql> UNLOCK TABLES;

2.2.2 Slave Steps

Setting the Replication Slave Configuration
# vi /etc/my.cnf
[mysqld]
server-id=2

Setting Up Replication with Existing Data
# mysql -u root -p < dbdump.db

Configure the slave with the replication coordinates from the master
mysql> CHANGE MASTER TO
    ->     MASTER_HOST='master_host_name',
    ->     MASTER_USER='replication_user_name',
    ->     MASTER_PASSWORD='replication_password',
    ->     MASTER_LOG_FILE='recorded_log_file_name',
    ->     MASTER_LOG_POS=recorded_log_position;
mysql> CHANGE MASTER TO MASTER_HOST='172.16.40.145',MASTER_USER='repl', MASTER_PASSWORD='password', MASTER_LOG_FILE='mysql-bin.000001', MASTER_LOG_POS=747;

Start the slave threads:
mysql> START SLAVE;

Validate:
mysql> SHOW SLAVE STATUS\G;

Stop Slave:
MySQL> STOP SLAVE;

2.3 open query log online

mysql> SET GLOBAL general_log = 'ON';
mysql> SET GLOBAL general_log_file = '/data/log/mysql/query.log';
mysql> SET GLOBAL general_log = 'OFF';

2.4 show bin log

default is path: /var/lib/mysql
# sudo  mysqlbinlog --no-defaults --database=wp_healthtopquestion --base64-output=DECODE-ROWS --verbose mysql-bin.000580 > ~/htq2.txt

2.5 show query log

general_log_file = /var/log/mysql/query.log
general_log      = 1

note: /var/log/mysql mysql:mysql 777

3. Install nginx / php7 ###############################################################################

# sudo yum install epel-release
# sudo yum install nginx
# sudo systemctl start nginx
# sudo systemctl status nginx
# sudo systemctl enable nginx  --- to start nginx automatically when linux start
# sudo nginx -T

refer: https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7

Remove all existing PHP packages:
# yum list installed *php*   -- get a list of all installed PHP packages
# yum remove php php-cli php-common php-gd php-ldap php-mysql php-odbc php-pdo php-pear php-pecl-apc php-pecl-memcache php-pgsql php-soap php-xml php-xmlrpc   -- removing PHP, we must remove all of the above packages. In the terminal, execute the following command.

# cd ~
# curl 'https://setup.ius.io/' -o setup-ius.sh
# sudo bash setup-ius.sh
# sudo yum install php71u-fpm-nginx php71u-cli php71u-mysqlnd php71u-mbstring php71u-json php71u-mcrypt php71u-gd php71u-opcache php71u-pdo php71u-pear php71u-pecl-igbinary php71u-devel php71u-pecl-redis php71u-pecl-memcache php71u-pecl-memcached php71u-process php71u-xml php71u-json
# sudo yum install php71u-devel
# sudo yum install php71u-pear   -- for pecl
# sudo yum install php71u-pecl-redis  -- for redis extension
# sudo yum install ImageMagick ImageMagick-devel -- optional, for image php
# sudo yum install php71u-imagick -- optional, for image php, wrapper of ImageMagick

yum install php71u php71u-cli php71u-common php71u-fpm php71u-gd php71u-mbstring php71u-mysqlnd php71u-opcache php71u-pdo php71u-pear php71u-pecl-igbinary php71u-pecl-memcache php71u-pecl-memcached php71u-process php71u-xml php71u-json

# sudo php -i | grep "Loaded Configuration File"
# sudo php -m  -- list all modules
# sudo vi /etc/php-fpm.d/www.conf
uncomment:
;user = php-fpm
;group = php-fpm
user = nginx
group = nginx
uncomment:
listen = 127.0.0.1:9000
listen.acl_users = nginx
# sudo vi /etc/nginx/conf.d/php-fpm.conf
uncomment:
server 127.0.0.1:9000;
# sudo vi /etc/nginx/default.d/php.conf
location ~ \.php$ {
    try_files $uri =404;
    fastcgi_intercept_errors on;
    fastcgi_index  index.php;
    include        fastcgi_params;
    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    fastcgi_pass   php-fpm;
}
# sudo systemctl restart php-fpm
# sudo systemctl status php-fpm
# sudo systemctl restart php-fpm
# sudo systemctl status php-fpm
# sudo systemctl enable php-fpm   -- to start php-fpm automatically when linux start
# sudo vi /var/www/html/info.php
    /var/www/html
    /var/www/
    /usr/share/nginx/html
<?php
phpinfo();
?>
# sudo php --version
# sudo php -i | more -- same as phpinfo()
# sudo php --ini -- dump ini files

For php installation with source code, use php -i to locate ini path, create php.ini and put new extensions configuration.

# wget http://server_domain_name_or_IP/info.php

refer: https://www.digitalocean.com/community/tutorials/how-to-upgrade-to-php-7-on-centos-7

4. Install NFS ###############################################################################

Server Side: (172.16.40.139)
# yum install nfs-utils
# systemctl enable nfs-server.service
# systemctl start nfs-server.service
# systemctl status nfs-server.service

Client Side (172.16.40.145):
# yum install nfs-utils

Server Side:
# vi /etc/exports
/data/wp-sync 172.16.40.145(rw,sync,no_root_squash,no_subtree_check)

Client Side:
# mount 172.16.40.139:/data/wp-sync /data/wp-sync
# df -h
# mount
# touch /data/wp-sync/test.txt
# vi /etc/fstab 
172.16.40.139:/data/wp-sync /data/wp-sync nfs rw,sync,hard,intr  0  0
# reboot
# df -h
To remove:
# sudo umount /data/wp-sync

GlusterdFS
refer: https://wiki.centos.org/HowTos/GlusterFSonCentOS
Server Side:
# sudo gluster peer status
# sudo gluster volume info all
# sudo systemctl enable glusterd.service   ---- Enable and start glusterfsd.service on both nodes:
# sudo systemctl status glusterd.service
# sudo systemctl start glusterd.service
# sudo systemctl stop glusterd.service

Client Side:
# sudo gluster peer status
# sudo gluster volume status
# sudo gluster volume start share force   ---- share is the name of volume
# sudo systemctl enable glusterd.service   ---- Enable and start glusterfsd.service on both nodes:
# sudo systemctl status glusterd.service
# sudo systemctl start glusterd.service
# sudo systemctl stop glusterd.service

5. CertBot

# sudo pip uninstall requests
# sudo pip uninstall urllib3
# sudo yum remove python-urllib3
# sudo yum remove python-requests
# sudo yum install python-urllib3 python-requests 
# sudo yum install certbot

when urllib3 error:
# cd /usr/lib/python2.7/site-packages
# sudo rm -rf logging
# sudo pip uninstall urllib3
# sudo pip install urllib3==1.22   -- match the version required by certbot

nginx config

HTTP & HTTPS:
location ^~ /.well-known/acme-challenge/ {
	default_type "text/plain";
	root /data/wp-sync/wp-data/html;
}
HTTPS only:
location = /.well-known/acme-challenge/ {
	return 404;
}

The default conf location: /etc/letsencrypt
# sudo certbot certificates ---------------------- list all certs 
# sudo certbot certonly --staging --dry-run --webroot -w /data/wp-sync/wp-data/html/ -d www.trackglucose.com --------------- test to request new certbot
# sudo certbot certonly --webroot -w /data/wp-sync/wp-data/html/ -d www.trackglucose.com --------------- request new certbot
# sudo certbot renew -------------------------- renew all existing certs

safe to replace corrupt domain cert:

a. backup cert files to nginx cert folder
# sudo cp /data/wp-sync/letsencrypt/conf/live/bpdiet.net/fullchain.pem cert/bpdiet.net_fullchain.pem
# sudo cp /data/wp-sync/letsencrypt/conf/live/bpdiet.net/privkey.pem cert/bpdiet.net_privkey.pem

b. change nginx cert file path to backup path
#ssl_certificate /data/wp-sync/letsencrypt/conf/live/bpdiet.net/fullchain.pem;
#ssl_certificate_key /data/wp-sync/letsencrypt/conf/live/bpdiet.net/privkey.pem;
ssl_certificate cert/bpdiet.net_fullchain.pem;
ssl_certificate_key cert/bpdiet.net_privkey.pem;
				
c. remove all related cert files
# rm -rf /etc/letsencrypt/archive/${DOMAIN}
# rm -rf /etc/letsencrypt/live/${DOMAIN}
# rm -rf /etc/letsencrypt/renewal/${DOMAIN}.conf

d. re-request certs from letsencrypt
# /opt/script/request_cert.sh

e. if ok, recover nginx cert file path
ssl_certificate /data/wp-sync/letsencrypt/conf/live/bpdiet.net/fullchain.pem;
ssl_certificate_key /data/wp-sync/letsencrypt/conf/live/bpdiet.net/privkey.pem;
#ssl_certificate cert/bpdiet.net_fullchain.pem;
#ssl_certificate_key cert/bpdiet.net_privkey.pem;

6. supervisord

# -- deprecated: easy_install supervisor
or 
# -- deprecated: pip install supervisor
# sudo yum install epel-release
# sudo yum install supervisor
refer: http://supervisord.org/installing.html#installing-to-a-system-with-internet-access
# vi /etc/supervisord.conf
[program:sync_mysql_to_es]
command=/opt/go-mysql-es/mysql-es.sh
autostart=true
startsecs=10
startretries=3
autorestart=true
user=mysqles

# /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf

7. go-mysql-es

download go package from https://golang.org/dl/
# cd /root
# tar xvzf go1.11.linux-amd64.tar.gz
# mv go /usr/local
# vi .bashrc
export GOROOT=/usr/local/go
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
export GOPATH=$HOME/GOPROJ
# cd /root
# source .bashrc
# go
# go version
# go env

https://github.com/siddontang/go-mysql-elasticsearch
# yum install git
# go get github.com/siddontang/go-mysql-elasticsearch, it will print some messages in console, skip it. :-)
# cd $GOPATH/src/github.com/siddontang/go-mysql-elasticsearch
# make
# cd bin
that's it!

#!/usr/bin/bash
cd /opt/go-mysql-es && ./go-mysql-elasticsearch -config=river.toml

troubleshooting:
1. bin log not found
# stop go-mysql-elasticsearch
# cd /data/mysql-es
# remove master.info
# start go-mysql-elasticsearch

8. elasticsearch
download jdk8 rpm from orcale
# sudo yum localinstall jdk-8u161-linux-x64.rpm
refer: https://www.digitalocean.com/community/tutorials/how-to-install-java-on-centos-and-fedora
# cd /etc/zypp/repos.d/
# vi elasticsearch.repo
[elasticsearch-6.x]
name=Elasticsearch repository for 6.x packages
baseurl=https://artifacts.elastic.co/packages/6.x/yum
gpgcheck=1
gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
enabled=1
autorefresh=1
type=rpm-md
# sudo yum install elasticsearch
# vi /etc/elasticsearch/elasticsearch.yml
network.host: 0.0.0.0
# systemctl start elasticsearch
To enable auto start for elasticsearch:
# sudo /bin/systemctl daemon-reload
# sudo /bin/systemctl enable elasticsearch.service
# sudo systemctl start elasticsearch.service
# sudo systemctl stop elasticsearch.service
refer: https://www.elastic.co/guide/en/elasticsearch/reference/current/rpm.html

9. Redis

# yum install epel-release
# yum install redis
# systemctl start redis.service
# systemctl start redis.service
If you’d like Redis to start on boot, you can enable it with the enable command:
# systemctl enable redis
You can check Redis’s status by running the following:
# systemctl status redis.service
$ redis-cli ping
PONG

# vi /etc/redis.conf
#bind to all
#bind 127.0.0.1
bind 0.0.0.0
# disable auth
#requirepass foobared

10. install phpmyadmin

download phpMyAdmin-4.8.2-all-languages.zip
# unzip phpMyAdmin-4.8.2-all-languages.zip
# mv phpMyAdmin-4.8.2-all-languages /data/wp-app/phpMyAdmin
# vi /etc/nginx/conf.d/phpmyadmin.conf
	server {
        listen       80;
        server_name  www.phpmyadmin.com;
        root         /data/wp-app/phpMyAdmin;

        access_log      /data/logs/phpmyadmin/access.log;
        error_log       /data/logs/phpmyadmin/error.log;

        add_header X-Frame-Options SAMEORIGIN;
        location / {
                index   index.php index.html index.htm;
                if ( -f $request_filename) {
                        expires 14d;
                        break;
                }
                if ( !-e $request_filename) {
                        rewrite ^(.+)$ /index.php?q=$1 last;
                }
                location ~ \.php$ {
                        fastcgi_pass    127.0.0.1:9000;
                        fastcgi_index   index.php;
                        fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
                        fastcgi_param   PATH_INFO       $fastcgi_script_name;
                        include /etc/nginx/fastcgi_params;
                }
        }
    }
# chown nginx:nginx /var/lib/php/fpm/session -R
# chmod 777 /var/lib/php/fpm/session/ -R
# systemctl restart php-fpm

11. Backup

Remove Sync:
#rsync -rltzv --omit-dir-times --delete --exclude=wp-content  root@centos_a:/data/wp-app/htq/ /data/wp-app/htq/

12. Wordpress Domain Change
Dashboard - Settings - General
change: site url AND wordpress url with new domain
mysql> UPDATE wp_posts SET post_content = REPLACE(post_content, 'http://wp.com/', 'http://wp2.com/') WHERE post_status = 'publish' AND post_content LIKE '%http://wp.com/%';
change nginx configuration

13. lsyncd

lsyncd is for instantly unidirectional replication.

refer to:
http://blog.51cto.com/openlinuxfly/1679279
https://www.linuxtechi.com/install-and-use-lsyncd-on-centos-7-rhel-7/
http://yallalabs.com/linux/how-to-install-and-configure-lsyncd-on-centos-7-rhel-7/
https://www.jianshu.com/p/0ecac4f6baf2
https://github.com/axkibe/lsyncd/issues/394
https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers

Master: (172.16.40.139) Slave: (172.16.40.145)
Master Side:
# cat /proc/sys/fs/inotify/max_user_watches
# echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
  -- default is 8192
# cat /proc/sys/fs/inotify/max_queued_events
# echo fs.inotify.max_queued_events=50000 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
  -- default is 16384
# ssh-keygen -t rsa
# ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.16.40.145
# -- (optional) yum install epel-release
# yum install lsyncd -y
# vi /etc/lsyncd.conf 
settings {
   logfile    = "/tmp/lsyncd.log",
   statusFile = "/tmp/lsyncd.status",
   statusInterval = 5,
   nodaemon = true,
}
sync {
    default.rsync,
    source    = "/data/wp-sync",
    target    = "root@172.16.40.145:/data/wp-sync",
    delete = true,
    exclude = { ".swp" },
    delay = 1,
    rsync = {
        binary = "/usr/bin/rsync",
        archive = true,
        compress = true,
        verbose  = true,
        rsh = "/usr/bin/ssh -p 22 -o StrictHostKeyChecking=no",
        _extra    = {"--bwlimit=200"},
    }
}
sync {
    default.rsync,
    source    = "/var/www/html",
    target    = "root@172.16.40.145:/var/www/html",
    delete = true,
    exclude = { ".swp" },
    delay = 1,
    rsync = {
        binary = "/usr/bin/rsync",
        archive = true,
        compress = true,
        verbose  = true,
        rsh = "/usr/bin/ssh -p 22 -o StrictHostKeyChecking=no",
        _extra    = {"--bwlimit=200"},
    }
}

############# Note #############
rsync alternative configuration:
rsync = { rsh = "/usr/bin/ssh -l root -i /root/.ssh/id_rsa" }

# systemctl enable lsyncd
# systemctl start lsyncd
# systemctl status lsyncd
# tail -f /tmp/lsyncd.status
verify two source and target, add and delete and modify files at server side, check file at slave side

FAQ: ssh-copy-id to rebuild insist for master and slave

Wed Jan 23 16:26:33 2019 Error: Temporary or permanent failure on startup of /data/wp-sync/wp-data/ -> root@172.20.123.36:/data/wp-sync/wp-data/. Terminating since "insist" is not set.

FIX: 

14. Chrome

# wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
# wget https://chromedriver.storage.googleapis.com/2.45/chromedriver_linux64.zip
# sudo yum install ./google-chrome-stable_current_*.rpm
# unzip chromedriver_linux64.zip

15. Python3
Python2.7 is installed by default.
# yum install -y python36u python36u-libs python36u-devel python36u-pip
# python3.6 -v
# pip3.6 install requests webdriver pymsql maxminddb
# pip3.6 install pysocks -- for proxy of socks5

16. PHP Session

# yum install redis
# vi /etc/redis.conf
comment
# bind 127.0.0.1
protected-mode yes  -- enable remote connection

validation:
http://htqa.dev.chn.gbl/wp-content/plugins/post-tester/redis.php
https://healthtopquestions.com/wp-content/plugins/post-tester/redis.php

Update the php ini file
# sudo php -i | grep "Loaded Configuration File"
# sudo vi /etc/php.ini

# redis single
session.save_handler = redis
session.save_path = "tcp://172.16.40.139:6379?weight=1&auth=foobared"  -- with auth
session.save_path = "tcp://172.16.40.139:6379?weight=1"                -- without auth
session.save_path = "tcp://host1:6379?weight=1,tcp://host2:6379?weight=2&timeout=2.5,tcp://host3:6379?weight=2"

# redis cluster
session.save_handler = rediscluster
session.save_path = "seed[]=172.20.123.41:6379&seed[]=172.20.123.42:6379&timeout=2&read_timeout=2&failover=error&persistent=1"

Update php-fpm configuration to disable session configuration:
# sudo vi /etc/php-fpm.d/www.conf
comment following lines, which will overwrite php.ini
;php_value[session.save_handler] = files
;php_value[session.save_path]    = /var/lib/php/fpm/session

validation:
phpinfo() to validate configurations
http://htqa.dev.chn.gbl/wp-content/plugins/post-tester/session.php
https://healthtopquestions.com/wp-content/plugins/post-tester/session.php
https://github.com/phpredis/phpredis/blob/develop/cluster.markdown#readme


16.1 php-redis build

build php-redis
download phpredis-master.zip with lastest stable version: https://github.com/phpredis/phpredis/tree/master
# unzip phpredis-master.zip
# phpize
# ./configure --with-php-config=/usr/local/bin/php-config -- see php build
# make
# make test
# make install -- the redis.so will be copy to  /usr/local/php7/lib/php/extensions/no-debug-non-zts-20160303/

build igbinary
download igbinary-3.0.0.zip with latest stable version: https://github.com/igbinary/igbinary/tree/v3
# phpize
# ./configure
# make
# make test
# make install -- the igbinary.so will be copy to  /usr/local/php7/lib/php/extensions/no-debug-non-zts-20160303/

17. Wordpress File Sync

proxy pass /wp-admin/ to main node;
gibook_server is set in hosts;
rewrite /wp-admin/*;

See gibook.top.conf

		location /wp-admin/ {
			sendfile off;
			proxy_pass http://gibook_server:8004/wp-admin/;
			proxy_redirect default;
			
			proxy_set_header Host gibook.top;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Via $hostname;
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_max_temp_file_size 0;
			
			client_max_body_size 10m;
			client_body_buffer_size 128k;
		}

		#########################################################################################################

		location = /a {
			proxy_pass http://127.0.0.1:8080/a;
			...
		}
		location ^~ /a/ {
			proxy_pass http://127.0.0.1:8080/a/;
			...
		}
		As stated in nginx documentation if proxy_pass used without URI (i.e. without path after server:port) nginx will put URI from original request exactly as it was with all double slashes, ../ and so on.
		
		On the other side, URI in proxy_pass acts like alias directive, means nginx will replace part that matches location prefix (in out case it's /a in first location and /a/ is second) with URI in proxy_pass directive (which I intentionally made the same as location prefix) so URI will be the same as requested but normalized (without doule slashes and all that staff). Be careful with trailing slashes. Nginx replaces part literally and you could end up with some strange url.
		
		Here is an example with trailing slash in location, but no trailig slash in proxy_pass.
		
		location /one/ {
			proxy_pass http://127.0.0.1:8080/two;
			...
		}
		if one go to address http://yourserver.com/one/path/here?param=1 nginx will proxy request to http://127.0.0.1/twopath/here?param=1. See how two and path concatenates.
		
18. build php by source code

# sudo yum install gcc gcc-c++ make zlib zlib-devel pcre pcre-devel  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers
# sudo yum install libxml2-devel
# sudo yum install libmcrypt-devel
# sudo yum install libcurl-devel
# sudo yum install libxslt-devel
# sudo yum install openssl-devel
# sudo yum install libjpeg-devel
# sudo yum install libpng-devel
# sudo yum install curl-devel
# sudo yum install openldap-devel
# sudo yum install freetype-devel

# tar xvzf php-7.1.11.tar.gz
# cd php-7.1.11
# ./configure  --prefix=/usr/local/php7 --with-curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir -with-jpeg-dir --with-xmlrpc --with-xsl --with-zlib --with-mcrypt --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-gd-native-ttf --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip 

# make
# make test
# make install

copy php binary
# cd /usr/local/php7/bin
# sudo cp * /usr/local/bin

copy php-fpm binary
# cd /usr/local/php7/sbin
# sudo cp * /usr/local/sbin

change php config
# cd /usr/local/php7/lib
# sudo cp /root/php-7.1.11/php.ini-development ./
# sudo cp /root/php-7.1.11/php.ini-production ./
# sudo cp php.ini-development php.ini  -- use dev config
# sudo vi php.ini - with below content

So we set few things here, enable <? tag, limit access to files from PHP level, disabled dangerous functions, adjusts timezone, security, max execution times, errors etc. In addition we have enable OPCache for PHP.

#########################################
short_open_tag = On
open_basedir = /var/www
disable_functions = exec,passthru,shell_exec,system,proc_open,popen
expose_php = Off
max_execution_time = 30
memory_limit = 64M
date.timezone = Europe/Warsaw
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
display_errors = Off
display_startup_errors = Off
log_errors = On
post_max_size = 5M
upload_max_filesize = 4M

zend_extension=opcache.so
opcache.enable=1
opcache.enable_cli=1
opcache.memory_consumption=256
opcache.interned_strings_buffer=16
opcache.max_accelerated_files=8000
opcache.validate_timestamps=0 ;set this to 1 on test server, or Two ways to reset opcache below.
opcache.revalidate_freq=5
opcache.fast_shutdown=1

Two ways to reset opcache:
a. Restart PHP FPM or Apache - The sledgehammer method of invalidating files in Opcache has the downside that it might lead to aborted requests and a very small amount of time where requests get lost.
b. Calling opcache_reset(), which is tricky because it has to be called in a script executed by Apache or PHP-FPM to affect the webservers Opcache. You can add a special endpoint to your application and secure it using a secret hash.

#########################################

copy php-fpm.conf
# sudo vi /usr/local/etc/php-fpm.conf
paste file content of php-fpm.conf  -- note: session.save_handler and save_path is disabled, use definition of php.ini, see section 16.

copy www.conf
# sudo mkdir /usr/local/etc/php-fpm.d
# sudo vi /usr/local/etc/php-fpm.d/www.conf
paste file content of www.conf

create php-fpm service
# sudo vi /etc/systemd/system/php-fpm.service
paste file content of php-fpm.service

validate
# sudo php -i | more
# sudo systemctl status php-fpm
# sudo systemctl start php-fpm
# sudo systemctl restart php-fpm

18.1 build php with AMQP

refer to: https://www.cnblogs.com/jie-fang/p/7885924.html
refer to: https://github.com/alanxz/rabbitmq-c

# yum install cmake

# wget https://github.com/alanxz/rabbitmq-c/archive/v0.10.0.tar.gz
# tar zxvf v0.10.0.tar.gz
# cd rabbitmq-c-0.10.0
# mkdir build && cd build
# cmake ..
# cmake --build . --config Release --target install    ------- install librabbitmq into /usr/local/lib64

# wget http://pecl.php.net/get/amqp-1.10.0.tgz
# tar zxvf amqp-1.10.0.tgz
# yum install -y m4 autoconf
# cd amqp-1.10.0
# phpize
# find /usr/local -name php-config
# ./configure --with-php-config=/usr/local/php7/bin/php-config --with-amqp --with-librabbitmq-dir=/usr/local
# make
# make install
Installing shared extensions:     /usr/local/php7/lib/php/extensions/no-debug-non-zts-20160303/

edit php.ini
[rabbitmq]
extension=amqp.so

append librabbitmq into lib load path, otherwise amqp.so load shard lib error, load from /usr/lib64, while build is /usr/local/lib64
# vi /etc/bashrc
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64:/usr/local/lib
# reboot
OR
# cp -f /usr/local/lib64/librabbitmq.* /usr/lib64

validation
# vi test.php

<?php
$conn_args = array(
	'host' => '172.16.40.150',
	'port' => '5672',
	'login' => 'guest',
	'password' => 'guest',
	'vhost'=>'/'
);
$conn = new AMQPConnection($conn_args);
if (!$conn->connect()) {   
	die("connect to the broker error");
} else {
	echo "connection ok\n";
}
$channel = new AMQPChannel($conn);
$e_name = 'test3';
$ex = new AMQPExchange($channel);
$ex->setName($e_name);
$ex->setType(AMQP_EX_TYPE_DIRECT); //direct type
$ex->setFlags(AMQP_DURABLE); // persistence
echo "exchange status:".$ex->declare()."\n";
$result = $ex->publish("{}", "");
echo "publish result:".$result."\n";
?>

# php test.php

19 Reindex all posts

a. create new es template -- optional, if using new template
b. create new index with new template -- optional, if using new template
c. invoke api.php of post-indexer to recreate all index
d. test new index
e. move alias (remove old one and create new one)

20. StachPath cdn
https://github.com/MaxCDN/python-maxcdn
https://github.com/MaxCDN/php-maxcdn

Set page to no cache:
<?php
header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
?>

Set page to cache with specific time (seconds):
<?php
header("Cache-Control: max-age=120, s-maxage=120");
header("X-Accel-Expires: 120");
?>

21. wpcli

refer to https://wp-cli.org/

# installation =====================
# curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
or
# wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
# php wp-cli.phar --info
# chmod +x wp-cli.phar
# sudo mv wp-cli.phar /usr/local/bin/wp
# wp --info         -- validate installation
# sudo /usr/local/bin/wp cli update     -- update version

# install wordpress site with wpcli =======================
# sudo mkdir /data/wp-app/wpcli
# cd /data/wp-app/wpcli
# sudo wp core download --allow-root         --- download latest package
# sudo wp config create --dbname=pay --dbuser=wp_admin --dbpass=wpAdmin@2018 --dbhost=127.0.0.1 --allow-root
# sudo wp core install --url=pay.dev.chn.gbl --title=Payment --admin_user=wp_admin --admin_password=wpAdmin@2018 --admin_email=feisun@westwin.com --allow-root
# sudo wp core version          --- print wp version
# sudo wp core update           --- update to new version

NOTE####  if parameter has non-assci, use ''. --dbpass='~\0988'

clear wp databases ============================
mysql> drop table wp_commentmeta;
mysql> drop table wp_comments;
mysql> drop table wp_links;
mysql> drop table wp_options;
mysql> drop table wp_postmeta;
mysql> drop table wp_posts;
mysql> drop table wp_term_relationships;
mysql> drop table wp_term_taxonomy;
mysql> drop table wp_termmeta;
mysql> drop table wp_terms;
mysql> drop table wp_usermeta;
mysql> drop table wp_users;

22. kafka

download from https://kafka.apache.org/downloads
# tar xvzf kafka_2.12-2.2.0.tgz
# cd kafka_2.12-2.2.0
# bin/zookeeper-server-start.sh -daemon config/zookeeper.properties                                            --- listen on 2181
# bin/kafka-server-start.sh -daemon config/server.properties                                                   --- listen on 9092
# bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic mykafka   --- create topic, single node
# bin/kafka-topics.sh --list --zookeeper localhost:2181                                                           --- list all topics
# bin/kafka-topics.sh --describe --zookeeper localhost:2181
# bin/kafka-console-producer.sh --broker-list localhost:9092 --topic mykafka                       --- produce msg into topic, ctrl+c interrupt
# bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic mykafka --from-beginning        --- consume msg from topic, from beginning

live:
# bin/kafka-topics.sh --describe --zookeeper 172.16.40.6:2181,172.16.40.7:2181,172.16.40.8:2181
# bin/zookeeper-shell.sh 172.16.40.6:2181,172.16.40.7:2181,172.16.40.8:2181 <<< "ls /brokers/ids"

python client
# pip install kafka-python
refer to: kafka_helper.py

23. composer/tumblr
refer: https://www.vultr.com/docs/install-composer-on-centos-7
refer: https://packagist.org/packages/tumblr/tumblr
refer: https://docs.phpcomposer.com/01-basic-usage.html#Installation
refer: https://getcomposer.org/doc/01-basic-usage.md
refer: https://github.com/tumblr/tumblr.php
refer: https://www.phpcomposer.com/

# curl -sS https://getcomposer.org/installer | php
# php composer.phar
# mv composer.phar /usr/local/bin/composer

# php composer.phar require tumblr/tumblr:~0.4.0
or
# composer require tumblr/tumblr
# composer dump-autoload -o           ------------- Update the composer autoloader

# composer list  列出所有可用的命令
# composer init   初始化composer.json文件(就不劳我们自己费力创建啦)，会要求输入一些信息来描述我们当前的项目，还会要求输入依赖包
# composer install  读取composer.json内容，解析依赖关系，安装依赖包到vendor目录下
# composer update   更新最新的依赖关系到compsoer.lock文件，解析最新的依赖关系并且写入composer.lock文件
# composer search packagename 搜索包，packagename替换为你想查找的包名称
# composer require packagename 添加对packagename的依赖，packagename可修改为你想要的包名称
# composer show packagename
# composer self-update 更新 composer.phar文件自身
# composer dump-autoload --optimize 优化一下自动加载

============ autoloading =============
refer: https://www.cnblogs.com/webwei2017/p/9587842.html
# composer require gregwar/captcha    ------------- invoke at site root path, link not working !!!
# vi composer_test.php                ------------- invoke at site root path, link not working !!!
<?php
//phpinfo();
require __DIR__ . '/vendor/autoload.php';

use Gregwar\Captcha\CaptchaBuilder;
$builder = new CaptchaBuilder;
$builder->build();
header('Content-type: image/jpeg');
$builder->output();
?>

24. netcore

refer: https://zhuanlan.zhihu.com/p/55159679

# sudo rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm   ------- install repository
# sudo yum update
# sudo yum install dotnet-sdk-2.2
# dotnet --info            -------------- validate

create/build/publish (file system) a Web/MVC/netcore application: Mvc
copy into web root folder
#  dotnet MvcApplication3.dll --server.urls=http://0.0.0.0:5000

# sudo yum install supervisor 

25. eclipse for php (windows)

a. download eclipse for php from http://www.eclipse.org/downloads/.
b. download php binary from https://php.net/downloads.php - https://windows.php.net/download#php-7.1
c. unzip php binary into c:\php
d. download xdebug ext from https://xdebug.org/download.php - PHP 7.1 VC14 TS (64 bit) thread safe version !!!
e: edit php.ini, add following into end of file

;zend_extension=c:\php\ext\php_xdebug-2.7.2-7.1-vc14-nts-x86_64.dll
;zend_extension_ts=c:\php\ext\php_xdebug-2.7.2-7.1-vc14-nts-x86_64.dll
zend_extension="php_xdebug-2.7.2-7.1-vc14-x86_64.dll"
[Xdebug]
xdebug.auto_trace = On
xdebug.show_exception_trace = On
xdebug.remote_autostart = On
xdebug.remote_enable = On
xdebug.collect_vars = On
xdebug.collect_return = On
xdebug.collect_params = On
xdebug.trace_output_dir="E:/logs/xdebug"
xdebug.profiler_output_dir="E:/logs/xdebug"
xdebug.profiler_enable=On
xdebug.remote_host=localhost
xdebug.remote_port=9000
xdebug.remote_handler=dbgp

zend_extension=C:\php\ext\php_opcache.dll

[opcache]
opcache.enable = 1
opcache.memory_consumption = 128
opcache.max_accelerated_files = 4000
opcache.revalidate_freq = 60

; Required for Moodle
opcache.use_cwd = 1
opcache.validate_timestamps = 1
opcache.save_comments = 1
opcache.enable_file_override = 0

; If something does not work in Moodle
;opcache.revalidate_path = 1 ; May fix problems with include paths
;opcache.mmap_base = 0x20000000 ; (Windows only) fix OPcache crashes with event id 487

; Experimental for Moodle 2.6 and later
;opcache.fast_shutdown = 1
;opcache.enable_cli = 1 ; Speeds up CLI cron
;opcache.load_comments = 0 ; May lower memory use, might not be compatible with add-ons and other apps

e. set php debug to xdebug
f. phpinfo() to validate xdebug is OK

26. opcache gui

refer to: https://github.com/PeeHaa/OpCacheGUI/wiki/Installation

git clone https://github.com/PeeHaa/OpCacheGUI.git

Copy the file config.sample.php in the root of the project (as config.php) and make the changes needed for your environment.
# cd /data/wp-app/OpCacheGUI
# cp config.sample.php config.php
# vi config.php
'display_errors' => 'Off',
'log_errors'     => 'On'
'username'  => '',
'password'  => '',
'whitelist' => [
    'localhost',
	'172.16.10.26',
]

create nginx config
# cd /etc/nginx/conf
# vi site-opcache-gui.conf
server {
	listen      80;
	server_name opcache.dev.chn.gbl;
    root        /data/wp-app/OpCacheGUI/public;

	# Load configuration files for the default server block.
	include /etc/nginx/default.d/*.conf;
	
	location / {
		index index.php index.html index.htm;
		if ( -f $request_filename) {
			expires 14d;
			break;
		}
		if ( !-e $request_filename) {
			rewrite ^(.+)$ /index.php?q=$1 last;
		}
		location ~ .php$ {
			#fastcgi_pass    unix:/var/run/unix/php-fpm.socket;
			fastcgi_pass   127.0.0.1:9000;
			fastcgi_index   index.php;
			fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
			fastcgi_param   PATH_INFO       $fastcgi_script_name;
			include /etc/nginx/fastcgi_params;
		}
	}
}

27. web-based SSH

Web based ssh client 
refer: https://github.com/huashengdun/webssh
refer: https://webssh.huashengdun.org/

python NameError: name 'platform_system' is not defined
refer: https://stackoverflow.com/questions/46695657/pip-install-requestssecurity-nameerror-name-python-implementation-is-not-de
fix: upgrade pip和setuptools
# pip install --upgrade pip
# pip install --upgrade setuptools
# pip install cryptography
# pip install webssh

Help
# wssh --help

Deployment
Running behind an Nginx server
# wssh --address='127.0.0.1' --port=8888 --policy=reject
# Nginx config example
location / {
    proxy_pass http://127.0.0.1:8888;
    proxy_http_version 1.1;
    proxy_read_timeout 300;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Real-PORT $remote_port;
}

Generate cert.crt and cert.key
refer: https://serverfault.com/questions/224122/what-is-crt-and-key-files-and-how-to-generate-them
# openssl genrsa 2048 > host.key
# chmod 400 host.key
# openssl req -new -x509 -nodes -sha256 -days 365 -key host.key -out host.cert
then generate host.key and host.cert

Running as a standalone server
# wssh --port=8080 --sslport=4433 --certfile='host.cert' --keyfile='host.key' --xheaders=False --policy=reject
[I 191116 21:13:59 settings:98] RejectPolicy
[I 191116 21:13:59 main:39] Listening on 0.0.0.0:8080 (http)
[I 191116 21:13:59 main:39] Listening on 0.0.0.0:4433 (https)

open https://172.16.40.139:4433
connect any host with host/port/user/password
enjoy it !!!

28. http://web-console.org/
shellinabox
https://www.tecmint.com/shell-in-a-box-a-web-based-ssh-terminal-to-access-remote-linux-servers/
bastillion
https://github.com/bastillion-io/Bastillion

29. wordpress multi-sites

a. install wordpress normally
b. change wp-config.php
	define('WP_ALLOW_MULTISITE', true);
c. dashboard - tools - network settings -  
	set to subdomian, instead of subfolders
d. update wp-config.php, according tips
	define('MULTISITE', true);
	define('SUBDOMAIN_INSTALL', true);
	define('DOMAIN_CURRENT_SITE', 'My Website');
	define('PATH_CURRENT_SITE', '/');
	define('SITE_ID_CURRENT_SITE', 1);
	define('BLOG_ID_CURRENT_SITE', 1);
e. install and active plugin:
	WordPress MU Domain Mapping
	update wp-config.php

	define('SUNRISE', 'on');

	since main site is 1,
	add new site with 2, and subdomain, i.e. abc.domain.com
	set domain mapping: abc.domain.com -> www.domain2.com
	
refer:
	https://multilingualpress.org/docs/how-to-install-wordpress-multisite/
	https://www.digitalocean.com/community/tutorials/how-to-set-up-wordpress-multisite-with-nginx-on-ubuntu-14-04

30 nodejs

refer: https://www.e2enetworks.com/help/knowledge-base/how-to-install-node-js-and-npm-on-centos/

a. Add node.js yum repository

# yum install -y gcc-c++ make
# curl -sL https://rpm.nodesource.com/setup_6.x | sudo -E bash -
# curl -sL https://rpm.nodesource.com/setup_8.x | sudo -E bash -
# curl -sL https://rpm.nodesource.com/setup_10.x | sudo -E bash -
# curl -sL https://rpm.nodesource.com/setup_12.x | sudo -E bash -

latest version is 12.

b. Install node.js and NPM

# yum install nodejs

c. Verify versions

# node -v 

d. Testing the installation

# vim test_server.js
var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/plain'});
  res.end('Welcome');
}).listen(3001, "127.0.0.1");
console.log('Server running at http://127.0.0.1:3001/');

# node --debug test_server.js
debugger listening on port 5858
Server running at http://127.0.0.1:3001/

30 nltk_data

when nltk.download() error:

refer to: 
https://github.com/nltk/nltk_data
https://www.cnblogs.com/eksnew/p/12909814.html
# wget https://github.com/nltk/nltk_data/archive/gh-pages.zip
# unzip gh-pages.zip
nltk will search nltk_data in following path:
/root/nltk_data
/usr/nltk_data
/usr/share/nltk_data
/usr/lib/nltk_data
/usr/share/nltk_data
/usr/local/share/nltk_data
/usr/lib/nltk_data
/usr/local/lib/nltk_data
# sudo mkdir /usr/local/lib/nltk_data
# sudo cp -rf /root/tag_extractor/nltk_data-gh-pages/packages/* /usr/local/lib/nltk_data/
optional (nltk will auto unzip files?)
# cd /usr/local/lib/nltk_data/tokenizers
# unzip punkl.zip